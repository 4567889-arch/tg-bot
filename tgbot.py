# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import asyncio
import os
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from textblob import TextBlob
import yake

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
router = Router()

# üîë –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class AnalysisState(StatesGroup):
    waiting_for_text = State()
    waiting_for_keywords = State()
    waiting_for_wordcount = State()
    waiting_for_style = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑')],
        [KeyboardButton(text='–õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑')],
        [KeyboardButton(text='–û –ø—Ä–æ–µ–∫—Ç–µ')]
    ],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é'
)

catalog_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–°—Ç–∏–ª—å', callback_data='style')],
        [InlineKeyboardButton(text='–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', callback_data='tone')]
    ]
)

keywords_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞', callback_data='keywords')],
        [InlineKeyboardButton(text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å', callback_data='count_words')]
    ]
)

infor_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–û –±–æ—Ç–µ', callback_data='about')]
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç', reply_markup=main_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer('–≤—ã –Ω–∞–∂–∞–ª–∏ –ø–æ–º–æ—â—å')

# –°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
@router.message(F.text == '–°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑')
async def handle_stylistic_analysis(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=catalog_keyboard)

@router.callback_query(F.data == 'style')
async def ask_for_style(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
    await state.set_state(AnalysisState.waiting_for_style)
    await callback.answer()

@router.message(AnalysisState.waiting_for_style)
async def analyze_style(message: Message, state: FSMContext):
    text = message.text.lower()

    conversational_markers = ['—è', '—Ç—ã', '–º—ã', '–º–Ω–µ', '—Ç–µ–±–µ', '—Ç–µ–±—è', '–º–æ—è', '—Ç–≤–æ—è', '–Ω–∞—à', '–∫–æ—Ä–æ—á–µ', '—Ç–∏–ø–∞', '–≤–æ–æ–±—â–µ', '—á—ë', '–ª–∞–¥–Ω–æ', '–∞–≥–∞', '–±–ª–∏–Ω', '–∫—Å—Ç–∞—Ç–∏', '–∂–µ—Å—Ç—å', '–¥–∞–≤–∞–π', '–ø–æ—à–ª–∏', '–≤–æ—Ç', '—á–µ—Å—Ç–Ω–æ', '–ø—Ä–∞–≤–¥–∞', '–ø—Ä–∏–∫–æ–ª—å–Ω–æ', '–Ω—É', '–∞', '—Ç–∞–∫–æ–π', '—ç—Ç–∞', '–±—ã–ª–æ', '–∑–Ω–∞—á–∏—Ç', '–µ—Å–ª–∏ —á—Ç–æ', '–≤–æ–æ–±—â–µ-—Ç–æ', '–Ω—É —Ç–∏–ø–∞', '–æ–π', '—ç—Ö', '–º–º', '–∞–≥–∞']
    official_markers = ['–¥–∞–Ω–Ω—ã–π', '—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è', '–æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ', '–æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ', '–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏', '–≤ —Ä–∞–º–∫–∞—Ö', '—Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è', '–Ω–∞—Å—Ç–æ—è—â–∏–π', '–≤–Ω–µ–¥—Ä–µ–Ω–∏–µ', '–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ', '—Å–æ–≥–ª–∞—Å–Ω–æ', '–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ø—Ä–æ—Ç–æ–∫–æ–ª', '–æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å', '–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π', '—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '—Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–µ', '–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ', '—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', '–∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ', '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞', '–ø–æ–ª–æ–∂–µ–Ω–∏—è', '–ø—Ä–∞–≤–æ–≤–æ–µ', '–¥–æ–≥–æ–≤–æ—Ä', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ', '—Å—Ç—Ä—É–∫—Ç—É—Ä–∞', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞', '–≤–≤–µ–¥–µ–Ω–∏–µ', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π', '–¥–æ–ª–∂–Ω–æ—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ']
    publicistic_markers = ['–≤–∞–∂–Ω–æ', '–Ω—É–∂–Ω–æ', '—Å—á–∏—Ç–∞–µ–º', '–Ω–µ—Å–æ–º–Ω–µ–Ω–Ω–æ', '–æ–¥–Ω–∞–∫–æ', '—Å–ª–µ–¥—É–µ—Ç –æ—Ç–º–µ—Ç–∏—Ç—å', '–±–µ–∑—É—Å–ª–æ–≤–Ω–æ', '–æ—á–µ–≤–∏–¥–Ω–æ', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', '–Ω–∞ –Ω–∞—à –≤–∑–≥–ª—è–¥', '–∫–∞–∫ –∏–∑–≤–µ—Å—Ç–Ω–æ', '–ø–æ —Å—É—Ç–∏', '–Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞', '–æ–±—â–µ—Å—Ç–≤–æ', '–≥—Ä–∞–∂–¥–∞–Ω–µ', '–∞–∫—Ç—É–∞–ª—å–Ω–æ', '–¥–æ–ª–∂–Ω—ã', '–ø—Ä–æ–±–ª–µ–º–∞', '–≤—ã–∑–æ–≤ –≤—Ä–µ–º–µ–Ω–∏', '–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å', '–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ', '—Å—Ç–æ–∏—Ç –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å', '–≤ —Ü–µ–ª–æ–º', '—Ü–µ–ª—å—é —è–≤–ª—è–µ—Ç—Å—è', '–æ—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ', '–≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ', '–æ—Å—Ç—Ä–æ —Å—Ç–æ–∏—Ç –≤–æ–ø—Ä–æ—Å', '–º–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤', '–æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–Ω–µ–Ω–∏–µ', '—Å–æ–±—ã—Ç–∏–µ', '—Å–æ—Ü–∏–∞–ª—å–Ω—ã–π', '—Ü–µ–Ω–Ω–æ—Å—Ç–∏']

    score = {
        '–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π': sum(word in text for word in conversational_markers),
        '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π': sum(word in text for word in official_markers),
        '–ü—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏–π': sum(word in text for word in publicistic_markers)
    }

    style = max(score, key=score.get)
    explanation = {
        '–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π': "–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—á–Ω—ã–µ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏—è, —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —á–∞—Å—Ç–∏—Ü—ã –∏ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è.",
        '–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ-–¥–µ–ª–æ–≤–æ–π': "–¢–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–∞–Ω—Ü–µ–ª—è—Ä–∏–∑–º—ã, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –ª–µ–∫—Å–∏–∫—É –∏ —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
        '–ü—É–±–ª–∏—Ü–∏—Å—Ç–∏—á–µ—Å–∫–∏–π': "–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Ü–µ–Ω–æ—á–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ —Ä–∏—Ç–æ—Ä–∏–∫—É."
    }

    await message.answer(
        f"\U0001F4D8 –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å —Ç–µ–∫—Å—Ç–∞:\n\n"
        f"\U0001F539 {style}\n\n"
        f"\U0001F4CE {explanation[style]}"
    )
    await state.clear()

# –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
@router.callback_query(F.data == 'tone')
async def analyze_tone(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏.")
    await state.set_state(AnalysisState.waiting_for_text)
    await callback.answer()

@router.message(AnalysisState.waiting_for_text)
async def analyze_text(message: Message, state: FSMContext):
    blob = TextBlob(message.text)
    polarity = blob.sentiment.polarity
    score = int((polarity + 1) * 50)

    if score >= 60:
        category = "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π üòä"
        explanation = "–¢–µ–∫—Å—Ç –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –∫–∞–∫ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π."
    elif score <= 40:
        category = "–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π üòï"
        explanation = "–¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–∫—Ä–∞—Å–∫–æ–π."
    else:
        category = "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π üòê"
        explanation = "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞ –≤—ã—Ä–∞–∂–µ–Ω–∞ —Å–ª–∞–±–æ –∏–ª–∏ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞."

    await message.answer(
        f"\U0001F4CA –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏:\n\n"
        f"\U0001F539 –û—Ü–µ–Ω–∫–∞: {score}/100\n"
        f"\U0001F539 –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
        f"\U0001F4CE {explanation}"
    )
    await state.clear()

# –õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
@router.message(F.text == '–õ–µ–∫—Å–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑')
async def handle_lexical_analysis(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=keywords_keyboard)

@router.callback_query(F.data == 'keywords')
async def ask_for_keywords(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    await state.set_state(AnalysisState.waiting_for_keywords)
    await callback.answer()

@router.message(AnalysisState.waiting_for_keywords)
async def extract_keywords(message: Message, state: FSMContext):
    text = message.text
    kw_extractor = yake.KeywordExtractor(lan="ru", n=2, top=10)
    keywords = kw_extractor.extract_keywords(text)

    if keywords:
        keyword_list = "\n".join(f"‚Ä¢ {kw}" for kw, _ in keywords)
        await message.answer(f"\U0001F511 –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n\n{keyword_list}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç.")

    await state.clear()

@router.callback_query(F.data == 'count_words')
async def ask_for_wordcount(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤.")
    await state.set_state(AnalysisState.waiting_for_wordcount)
    await callback.answer()

@router.message(AnalysisState.waiting_for_wordcount)
async def count_words(message: Message, state: FSMContext):
    text = message.text
    words = text.split()
    word_count = len(words)
    char_count = len(text.replace(" ", ""))
    avg_word_len = (char_count / word_count) if word_count > 0 else 0

    long_words = [w for w in words if len(w) >= 8]
    long_word_count = len(long_words)
    percent_long = (long_word_count / word_count * 100) if word_count > 0 else 0

    if avg_word_len < 4:
        level = "\U0001F4DA –ù–∞—á–∞–ª—å–Ω—ã–π\n\U0001F4CE –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —à–∫–æ–ª—ã."
    elif avg_word_len < 5:
        level = "\U0001F3EB –®–∫–æ–ª—å–Ω—ã–π\n\U0001F4CE –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —à–∫–æ–ª—å–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."
    elif avg_word_len < 6:
        level = "\U0001F393 –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç\n\U0001F4CE –•–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ—Ç—Å—è –≤–∑—Ä–æ—Å–ª—ã–º–∏."
    else:
        level = "\U0001F9E0 –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\n\U0001F4CE –¢–µ–∫—Å—Ç —Å–ª–æ–∂–Ω—ã–π ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å."

    await message.answer(
        f"\U0001F4D8 –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—Å—Ç–∞:\n\n"
        f"\U0001F539 –°–ª–æ–≤: {word_count}\n"
        f"\U0001F4CA –î–ª–∏–Ω–Ω—ã—Ö —Å–ª–æ–≤ (8+ —Å–∏–º–≤–æ–ª–æ–≤): {long_word_count} ({percent_long:.1f}%)\n"
        f"\U0001F4CF –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {avg_word_len:.2f}\n\n"
        f"\U0001F4C8 –£—Ä–æ–≤–µ–Ω—å —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏: {level}"
    )
    await state.clear()

# –û –ø—Ä–æ–µ–∫—Ç–µ
@router.message(F.text == '–û –ø—Ä–æ–µ–∫—Ç–µ')
async def handle_about_project(message: Message):
    await message.answer('—Ä–∞–∑–¥–µ–ª –æ –±–æ—Ç–µ', reply_markup=infor_keyboard)

@router.callback_query(F.data == 'about')
async def about(callback: CallbackQuery):
    await callback.answer('–ß—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ?', show_alert=True)
    await callback.message.answer('–ë–æ—Ç —Å–æ–∑–¥–∞–Ω –ª–∏–Ω–≥–≤–∏—Å—Ç–∞–º–∏ –ò–ú–û–∏–í, –≤–ø–µ—Ä–≤—ã–µ –∑–∞–Ω–∏–º–∞—é—â–∏–º–∏—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –Ω–∞ Python.')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message()
async def echo(message: Message):
    await message.answer(message.text)
    await message.reply('–ë—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å? –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª–µ")
    
    bot = Bot(token=BOT_TOKEN) 
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω')
